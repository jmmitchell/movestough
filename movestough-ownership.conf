# This is the config file contains destination directory ownership to enforce
#
# Each line below should contain a owner:group pair followed by a tab followed
# by a fully qualified path to which the owner information should be applied. 
# For safety reasons directories specified below must be subdirectories of the
# destination directory.
#
# This file is not required for the script to run but, if needed, should be
# specified via the -o or --ownership flag.
#
# More info:
# By default, the contents that are moved from the source directory (specified
# via the -s or --source flag) to the destination directory (-d or
# --destination flag) will inherit the ownership of the system/user account
# under which the script is run.
#
# The default behavior can be overriden by supplying a owner:group pair and the
# corresponding path that will be supplied to chown. Each line supplied below
# will be recursively applied to the specified directory.
#
# Note that each line is processed in order. As a result, if a path is listed
# multiple times or a parent path is listed after the subdirectory, the last
# supplied ownership will win. This same effect can be used in reverse to
# purposefully enforce different ownership on a subdirectory than is apploed to
# the parent directory. This is accomplished supplying an entry below for the
# subdirectory after the listing for the parent directory.
#
# example if the source directory is "/shares/users/":
#
# root:root	/shares/users/
# usera:usera	/shares/users/User A/
# userb:userb	/shares/users/User B/
# userc:userc	/shares/users/User B/Private to User C/
# root:root	/shares/users/admin/backups/
